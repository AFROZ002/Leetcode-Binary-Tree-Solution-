/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

   public static TreeNode findElement(TreeNode root,int start){
       if(root==null) return null;
       Queue<TreeNode> q=new LinkedList<>();
       q.offer(root);
       while(!q.isEmpty()){
           TreeNode cur=q.poll();
           if(cur.val==start) return cur;
           if(cur.left!=null) q.offer(cur.left);
           if(cur.right!=null) q.offer(cur.right);
       }
       return null;
   }
   public  static  void markParents(TreeNode root,Map<TreeNode,TreeNode>parent_track,TreeNode target){
        Queue<TreeNode>queue=new LinkedList<TreeNode>();
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode current=queue.poll();
            if(current.left!=null){
                parent_track.put(current.left,current);
                queue.offer(current.left);
            }
            if(current.right!=null){
                parent_track.put(current.right,current);
                queue.offer(current.right);
            }

        }
    }
    public int amountOfTime(TreeNode root, int start) {
    Map<TreeNode,TreeNode>parent_track=new HashMap();
    TreeNode target=findElement(root,start);
    markParents(root,parent_track,root);
    Map<TreeNode,Boolean> visited=new HashMap<>();
     Queue<TreeNode>queue=new LinkedList<TreeNode>();
     queue.offer(target);
     visited.put(target,true);
     int curr_level=0;
     while(!queue.isEmpty()){
         int size=queue.size();
         curr_level++;
         for(int i=0;i<size;++i){
             TreeNode current=queue.poll();
             if(current.left!=null && visited.get(current.left)==null){
                 queue.offer(current.left);
                 visited.put(current.left,true);

             }

               if(current.right!=null && visited.get(current.right)==null){
                 queue.offer(current.right);
                 visited.put(current.right,true);

             }
             if(parent_track.get(current)!=null && visited.get(parent_track.get(current))==null){
               
               queue.offer(parent_track.get(current));
               visited.put(parent_track.get(current),true);

             }

         }
     }
     return curr_level-1;
        
    }
}