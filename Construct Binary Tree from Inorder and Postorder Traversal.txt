import java.util.*;

class Solution {
    public static TreeNode buildtree(int[] postorder, int poststart, int postEnd, int[] inorder, int instart, int inEnd, Map<Integer, Integer> inMap) {
        if (poststart > postEnd || instart > inEnd) {
            return null;
        }

        TreeNode root = new TreeNode(postorder[postEnd]);
        int inRoot = inMap.get(root.val);
        int numsleft = inRoot - instart;
        root.left = buildtree(postorder, poststart, poststart + numsleft - 1, inorder, instart, inRoot - 1, inMap);
        root.right = buildtree(postorder, poststart + numsleft, postEnd - 1, inorder, inRoot + 1, inEnd, inMap);

        return root;
    }

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer, Integer> inMap = new HashMap<>();
        for (int i = 0; i < inorder.length; ++i) {
            inMap.put(inorder[i], i);
        }
        TreeNode root = buildtree(postorder, 0, postorder.length - 1, inorder, 0, inorder.length - 1, inMap);
        return root;
    }
}
