/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public  static TreeNode buildtree(int [] preorder,int prestart,int preEnd, int [] inorder,int instart,int inEnd,Map<Integer,Integer>inMap){
        if(prestart>preEnd || instart>inEnd){
            return null;
        }
        TreeNode root=new TreeNode(preorder[prestart]);
        int inRoot=inMap.get(root.val);
        int numsleft=inRoot-instart;
        root.left=buildtree(preorder,prestart+1,prestart+numsleft,inorder,instart,inRoot-1,inMap);
        root.right=buildtree(preorder,prestart+numsleft+1,preEnd,inorder,inRoot+1,inEnd,inMap);
  
  
  return root;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
Map<Integer,Integer>inMap=new HashMap<Integer,Integer>();
for(int i=0;i<inorder.length;++i){
    inMap.put(inorder[i],i);
}
TreeNode root=buildtree(preorder,0,preorder.length-1,inorder,0,inorder.length-1,inMap);
return root;

        
    }

}